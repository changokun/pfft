/**
*
* @file  /Users/alexbrown/Public/www/pfft/com/web_servers/apache24.cfc
* @author
* @description
*
*/

component output="true" displayname="" extends="base"  {


	public void function establish_vhosts_files() {
		// this is for ubuntu apache 2.4s that use a sites-available type of thing.
		var site = '';
		var aliases = '';
		var file_content = '';
		var server_name = '';

		if( ! structKeyExists(application.config.web_server_config, 'sites_available_folder')) {
			throw "need sites_available_folder config.";
		}

		for(site in this.sites) {
			writeOutput(site.name & '<code>#application.config.web_server_config.sites_available_folder##site.sys_name#.conf</code><br><xmp>');
			file_content = '## Generated on #server.machineName# #dateFormat(now(), 'full')# at #timeFormat(now(), 'full')#
<VirtualHost *:80>
	ServerName #site.canonical_domain_name#
	DocumentRoot #application.config.pfft_root#sites/#site.sys_name#/www/
	ErrorLog ${APACHE_LOG_DIR}/#site.sys_name#-error.log
	CustomLog ${APACHE_LOG_DIR}/#site.sys_name#-access.log vhost_combined
	<Directory #application.config.pfft_root#sites/#site.sys_name#/www/ >';
	if(site.hosting_mode eq 'demonstration' or application.mode eq 'staging') {
		file_content &= '
		AuthType Basic
		AuthName "Restricted Demonstration"
		AuthUserFile "#application.config.web_server_config.basic_auth_user_file#"
		Require user #application.config.web_server_config.basic_auth_login#';
	} else {
		file_content &= '
		Require all granted';
	}
	file_content &= '
	</Directory>
</VirtualHost>';
			if(arrayLen(site.alias_domain_names)) {
				aliases = site.alias_domain_names;
				server_name = aliases[1];
				arrayDeleteAt(aliases, 1);
				file_content &= replace('
				<VirtualHost *:80>
					ServerName #server_name#
					', '				', '', 'all');
					if(arrayLen(aliases)) {
						file_content &= 'ServerAlias #arrayToList(aliases, ' ')#';
					}
					file_content &= replace('Redirect "/" "http://#site.canonical_domain_name#"
					</VirtualHost>
				', '					', '', 'all');
			}
			writeOutput(trim(file_content));
			writeOutput('</xmp><br><br>');
		}
		return;
	}
	
	

	public string function get_local_vhosts() {
		// on Tezcatlipoca, return all of them in one long string. (the first one, which will act as default, will be the scanner?/webserver admin?)
		// on Modigliani, return individual vhost entries for sites-available.
		// others may wish to use the same set up, just add your machine name to the appropriate case.
			var output = '';
			var aliases = '';
			var server_name = '';
			var site = '';
			var x = '';
			switch(server.machineName){
				case 'Tezcatlipoca':
					// there is always a special default site for the install mechanisms.
					savecontent variable='output' {
						writeOutput(replace('
						## This is the default for your local development machine: it will show the site installer
						<VirtualHost *:80>
							DocumentRoot "#application.config.pfft_root#services/install/"
							ServerName localhost
							ErrorLog "#application.config.pfft_root#services/install/local-apache-error-log"
							CustomLog "#application.config.pfft_root#services/install/local-apache-access-log" vhost_common
						</VirtualHost>
						', '						', '', 'all'));
					}
					// then loop over the known sites and add them.
						for(site in this.sites) {
							if(listFind('production,development,demonstration', site.hosting_mode)) {
								output &= replace('
								<VirtualHost *:80>
									DocumentRoot "#application.config.pfft_root#sites/#site.sys_name#/www/"
									ServerName #reReplace(site.canonical_domain_name, '\.\w{2,7}$', '.dev')#
									FallbackResource router.cfm
									ErrorLog "#application.config.pfft_root#sites/#site.sys_name#/www/local-apache-error-log"
									CustomLog "#application.config.pfft_root#sites/#site.sys_name#/www/local-apache-access-log" vhost_common
									<Directory "#application.config.pfft_root#sites/#site.sys_name#/www/">
										Require all granted
									</Directory>
								</VirtualHost>', '								', '', 'all');
								if(arrayLen(site.alias_domain_names)) {
									aliases = site.alias_domain_names;
									server_name = aliases[1];
									arrayDeleteAt(aliases, 1);
									output &= replace('
									<VirtualHost *:80>
										ServerName #reReplace(server_name, '\.\w{2,7}$', '.dev')#
										', '									', '', 'all');
										if(arrayLen(aliases)) {
											output &= 'ServerAlias #reReplace(arrayToList(aliases, ' '), '\.\w{2,7}\b', '.dev', 'all')#';
										}
										output &= replace('
										Redirect "/" "http://#reReplace(site.canonical_domain_name, '\.\w{2,7}$', '.dev')#"
									</VirtualHost>
									', '									', '', 'all');
								}
							}
						}
						break;

						default:
						output = 'not yet developed for your machine. see #getCurrentTemplate()#';
						break;
					}
					output &= '#chr(10)### Generated by #getMetaData(this).fullName# for #server.machineName# on #dateFormat(now(), 'full')##chr(10)#';
					return output;
				}






			}


